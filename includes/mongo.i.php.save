<?php
// called from tracker.php
// pass in extra $type, $from
// $site, $ip, $thepage, $agent, $java are all from tracker.php. $java is DECIMAL
// Alpha X key: JDTIK3N7E488ZY2T

$tmp = $java; // Save the DECIMAL version.
if($or) {
  $java |= $or;
}
$java = dechex($java); // make it hex

$date = new DateTimeImmutable('now', new DateTimeZone('America/New_York'));
$date = $date->format('Y-m-d H:i:sP');

$client = new MongoDB\Client('mongodb+srv://barton:11KYG7oKKP2USHFa@cluster0.hwvadag.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0');

$collection = $client->barton->tracker;

$find = $collection->findOne([
                              'site' => $site,
                              'ip' => $ip,
                              'page' => $thepage,
                              'agent' => $agent,
                             ]
                            );

if(!$find) {
    error_log("mongo.i.php: $from Adding,       java=$java, type=$type, site=$site, ip=$ip, page=$thepage, agent=$agent");
    // New document, insert with count 1
  
  //echo "Init: lasttime=$lasttime<br>";

  $doc = [
          'site' => $site,
          'ip' => $ip,
          'page' => $thepage,
          'agent' => $agent,
          'count' => 1,
          'java' => $java,
          'firsttime' => $date,
          'lasttime' => $date,          
         ];

  $bot = [];

  if($S->isBot($agemt) === true) {
    $doc['bot'] = ['isBot' => true, 'botCount'=>1, 'botAs'=>$botAs];
    //error_log("mongo.i.php: ".print_r($doc, true));
  }

  try {
    $collection->insertOne($doc);
  } catch(Exception $e) {
    error_log("mongo.i.php Dup Key: $site, $ip, $page, $agent");
    error_log("mongo.i.php Dup Key, \$e: ". $e->getMessage());
    error_log("mongo.i.php Dup Key, find: ".print_r($find, true));
    
    if($type == 'start') {
      $set = ['$set' => ['lasttime'=>$date, 'java'=>$java, 'diff'=>$diff,], '$inc' => ['count' => 1]];
    } else {
      $set = ['$set' => ['lasttime'=>$date, 'java'=>$java, 'diff'=>$diff]];
    }

    $result = $collection->updateOne(
                                     [
                                      '_id' => $find['_id'],
                                     ],
                                     $set,
                                    );

    $tmp = $result->getModifiedCount();

    if($result->isAcknowledged()) {
      if($tmp === 1) {
        error_log("mongo.i.php: $from Update after Dup Key Okay,  java=$java, type=$type, site=$site, ip=$ip, page=$thepage, agent=$agent");
      } elseif($tmp === 0) {
        error_log("mongo.i.php: $from No Update after Dup key,    java=$java, type=$type, site=$site, ip=$ip, page=$thepage, agent=$agent");
      }
    } else {
      error_log("mongo.i.php: $from Update Error after Dup key, java=$java, type=$type, site=$site, ip=$ip, page=$thepage, agent=$agent");
    }
  }
} else {
  if($type == 'start') {
    $set = ['$set' => ['lasttime'=>$date, 'java'=>$java, 'diff'=>$diff,], '$inc' => ['count' => 1]];
  } else {
    $set = ['$set' => ['lasttime'=>$date, 'java'=>$java, 'diff'=>$diff]];
  }
  //error_log("mongo.i.php Update: ".print_r($set, true));
  
  $result = $collection->updateOne(
                                   [
                                    '_id' => $find['_id'],
                                   ],
                                   $set,
                                  );

  $tmp = $result->getModifiedCount();

  if($result->isAcknowledged()) {
    if($tmp === 1) {
      error_log("mongo.i.php: $from Update Okay,  java=$java, type=$type, site=$site, ip=$ip, page=$thepage, agent=$agent");
    } elseif($tmp === 0) {
      error_log("mongo.i.php: $from No Update,    java=$java, type=$type, site=$site, ip=$ip, page=$thepage, agent=$agent");
    }
  } else {
    error_log("mongo.i.php: $from Update Error, java=$java, type=$type, site=$site, ip=$ip, page=$thepage, agent=$agent");
  }
}
$java = $tmp; // Return $java to its original DECIMAL value.
